import telebot
from telebot import types
from collections import defaultdict
import threading
import time
import requests

bot = telebot.TeleBot('7612181109:AAG0BK5_FsJZSaSZiji_Bw6uIMRzfy5tJGo')

# Language questions and PDFs
questions_data = {
    'ru': [
        {"q": "–ö–∞–∫ –≤—ã –æ–±—ã—á–Ω–æ —Ä–µ—à–∞–µ—Ç–µ —Ä–∞–±–æ—á–∏–µ –∑–∞–¥–∞—á–∏?", "options": [("‚ö°Ô∏è–î–µ–π—Å—Ç–≤—É—é —Å—Ä–∞–∑—É, —Ä–∞–∑–±–∏—Ä–∞—è—Å—å –ø–æ —Ö–æ–¥—É.", "A"), ("üîç–°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.", "B"), ("ü§ù–ü–µ—Ä–µ–¥–∞—é –∑–∞–¥–∞—á—É –¥—Ä—É–≥–æ–º—É.", "C")]},
        {"q": "–ß—Ç–æ –≤–∞–º –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è?", "options": [("üó£Ô∏è –û–±—â–µ–Ω–∏–µ", "A"), ("üíª –û–Ω–ª–∞–π–Ω –∏ —Ü–∏—Ñ—Ä—ã", "B"), ("‚ú® –ö—Ä–∞—Å–æ—Ç–∞ –∏ –Ω–æ–≤–æ–µ", "C")]},
        {"q": "–ö–∞–∫–∞—è –≤–∞—à–∞ –≥–ª–∞–≤–Ω–∞—è —Å–∏–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞?", "options": [("‚ö°Ô∏è –≠–Ω–µ—Ä–≥–∏—è", "A"), ("üîç –í–Ω–∏–º–∞–Ω–∏–µ –∫ –¥–µ—Ç–∞–ª—è–º", "B"), ("üé® –í–∫—É—Å –∏ —Å—Ç–∏–ª—å", "C")]},
        {"q": "–ß—Ç–æ —Å–∏–ª—å–Ω–µ–µ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –≤–∞—Å –Ω–∞ —Ä–∞–±–æ—Ç–µ?", "options": [("üèÜ –ü–æ–±–µ–¥–∞ –∏ –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ", "A"), ("üíõ –û—â—É—â–µ–Ω–∏–µ –ø–æ–ª—å–∑—ã –∏ —Å–º—ã—Å–ª–∞", "B"), ("üìã –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –ø–æ—Ä—è–¥–æ–∫", "C")]},
        {"q": "–ö–∞–∫–æ–π —Å—Ç–∏–ª—å –∂–∏–∑–Ω–∏ –≤–∞–º –±–ª–∏–∂–µ?", "options": [("üèÉ –ê–∫—Ç–∏–≤–Ω—ã–π", "A"), ("üßò –°–ø–æ–∫–æ–π–Ω—ã–π", "B"), ("üåà –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π", "C")]},
        {"q": "–ß—Ç–æ –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç?", "options": [("üìà –†–æ—Å—Ç –∏ —É—Å–ø–µ—Ö", "A"), ("ü§ù –ü–æ–º–æ—â—å –ª—é–¥—è–º", "B"), ("üé® –ö—Ä–∞—Å–æ—Ç–∞", "C")]},
        {"q": "–ï—Å–ª–∏ –±—ã –≤—ã —Å–æ–∑–¥–∞–ª–∏ —Å–≤–æ–π –±—Ä–µ–Ω–¥, —á—Ç–æ –±—ã–ª–æ –±—ã –Ω–∞ –ø–µ—Ä–≤–æ–º –ø–ª–∞–Ω–µ?", "options": [("‚ú® –Ø—Ä–∫–∏–π —Å—Ç–∏–ª—å", "A"), ("üõ†Ô∏è –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞", "B"), ("ü§ù –ü–æ–ª—å–∑–∞ –¥–ª—è –ª—é–¥–µ–π –∏ –æ–±—â–µ—Å—Ç–≤–∞", "C")]},
        {"q": "–ß—Ç–æ –¥–ª—è –≤–∞—Å –≤–∞–∂–Ω–µ–µ –≤ —Ä–∞–±–æ—Ç–µ?", "options": [("‚ù§Ô∏è–õ—é–±–æ–≤—å –∫ –¥–µ–ª—É", "A"), ("üí∞ –î–æ—Ö–æ–¥", "B"), ("üïäÔ∏è –°–≤–æ–±–æ–¥–∞", "C")]},
        {"q": "–ö–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –±–∏–∑–Ω–µ—Å–∞ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω?", "options": [("üåê –û–Ω–ª–∞–π–Ω", "A"), ("üè¨ –û—Ñ–ª–∞–π–Ω", "B"), ("üîÄ –°–º–µ—à–∞–Ω–Ω—ã–π", "C")]},
        {"q": "–ß–µ–º –±—ã –≤—ã –∑–∞–Ω–∏–º–∞–ª–∏—Å—å –¥–∞–∂–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ?", "options": [("üìö –û–±—É—á–µ–Ω–∏–µ–º –∏–ª–∏ –ø–æ–º–æ—â—å—é", "A"), ("üé® –ö—Ä–∞—Å–æ—Ç–æ–π –∏–ª–∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ–º", "B"), ("üíª –û–Ω–ª–∞–π–Ω-–ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏–ª–∏ —Å–æ—Ü—Å–µ—Ç—è–º–∏", "C")]},
        {"q": "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ: –≤—ã –Ω–∞ —Å—Ç–∞—Ä—Ç–µ –±–∏–∑–Ω–µ—Å–∞. –ö–∞–∫–æ–π –≤–∞—à –ø–µ—Ä–≤—ã–π —à–∞–≥?", "options": [("üì£ –ó–∞—è–≤–ª—é –æ —Å–µ–±–µ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö", "A"), ("üìä¬† –°–¥–µ–ª–∞—é –±–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω –∏ –ø—Ä–æ—Å—á–∏—Ç–∞—é –≤—Å–µ", "B"), ("ü§ù –°–æ–±–µ—Ä—É –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤ –∏ –∫–æ–º–∞–Ω–¥—É", "C")]},
    ],
    'uz': [
        {"q": "Ish vazifalarini qanday hal etasiz?", "options": [("Darhol boshlayman ‚ö°Ô∏è", "A"), ("Ma‚Äôlumot yig‚Äòaman üìö", "B"), ("Boshqalarga topshiraman ü§ù", "C")]},
        {"q": "Qaysi vazifa sizga ko‚Äòproq yoqadi?", "options": [("Muammolarni hal qilish üõ†Ô∏è", "A"), ("Jarayonlarni yaxshilash üîß", "B"), ("Yangi loyihalarni boshlash üöÄ", "C")]},
        {"q": "Sizga nima ko‚Äòproq yoqadi?", "options": [("Muloqot üó£Ô∏è", "A"), ("Internet va raqamlar üíª", "B"), ("Go‚Äòzallik va yangiliklarmi ‚ú®", "C")]},
        {"q": "Sizning eng asosiy kuchli tomoningiz qaysi?", "options": [("G'ayrat üí™", "A"), ("Tafsilotlarga e‚Äôtibor üîç", "B"), ("Did va uslub üé®", "C")]},
        {"q": "Ishda sizni nima rag‚Äòbatlantiradi?", "options": [("G‚Äòalaba va e‚Äôtirof üèÜ", "A"), ("Foydali ish ‚ù§Ô∏è", "B"), ("Samaradorlik va tartib üìä", "C")]},
        {"q": "Qanday hayot tarzi yoqadi?", "options": [("Faol üí•", "A"), ("Tinch üåø", "B"), ("Rang-barang üåà", "C")]},
        {"q": "Stressni qanday yengasiz?", "options": [("Sport yoki yurish üèÉ‚Äç‚ôÇÔ∏è", "A"), ("Do‚Äòstlar bilan gaplashib üó£Ô∏è", "B"), ("Yolg‚Äòizlikda dam olib üåô", "C")]},
        {"q": "Sizni eng ko‚Äòp nima ruhlantiradi?", "options": [("O‚Äòsish va muvaffaqiyat üöÄ", "A"), ("Insonlarga yordam ko‚Äòrsatish ü§ù", "B"), ("Go‚Äòzallik üé®", "C")]},
        {"q": "Muvaffaqiyat siz uchun nima?", "options": [("Pul va obro‚Äò üí∞‚ú®", "A"), ("Ma‚Äôno va qadriyat üí°‚ù§Ô∏è", "B"), ("Erkinlik va vaqt üïäÔ∏è‚è∞", "C")]},
        {"q": "Yangi narsalarni qanday o‚Äòrganasiz?", "options": [("Amalda sinab ko‚Äòrib üîßüí•", "A"), ("Kitob yoki kurslardan üìöüéì", "B"), ("Boshqalardan o‚Äòrganib üë•üí¨", "C")]},
        {"q": "Sizni orzuyingizdagi natijaga eng tez yetkazadigan narsa nima, deb o‚Äòylaysiz?", "options": [("Yaxshi jamoa üë•", "A"), ("To‚Äòg‚Äòri strategiya üìä", "B"), ("Moliyaviy resurslar üí∞", "C")]},
    ]
}

data = {
    'questions': questions_data,
    'pdf_links': {
        "ru": {
            'A': ['pdfs/–ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω –ò–≤–µ–Ω—Ç –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ –æ—Ç Azma Finance.pdf', 'pdfs/–ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω –ø–æ –ø—Ä–æ–¥–∞–∂–µ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤  –æ—Ç Azma Finance.pdf', 'pdfs/–ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω IT –°—Ç–∞—Ä—Ç–∞–ø–∞ –æ—Ç Azma Finance.pdf', 'pdfs/–ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω –æ–Ω–ª–∞–∏ÃÜ–Ω —à–∫–æ–ª—ã  –æ—Ç Azma Finance .pdf'],
            'B': ['pdfs/–ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω —Ü–µ–Ω—Ç—Ä–∞ –¥–µ—Ç—Å–∫–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è  –æ—Ç Azma Finance.pdf', 'pdfs/–ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω  –æ–Ω–ª–∞–∏ÃÜ–Ω —à–∫–æ–ª—ã –ø–æ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é  –æ—Ç Azma Finance.pdf', 'pdfs/–ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã –æ—Ç Azma Finance.pdf', 'pdfs/–ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω —Å–≤–∞–¥–µ–±–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ –æ—Ç Azma Finance.pdf'],
            'C': ['pdfs/–ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω –ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥–æ–≤–æ–∏ÃÜ –∫–æ–º–ø–∞–Ω–∏–∏  –æ—Ç Azma Finance .pdf', 'pdfs/–ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω —Ü–µ–Ω—Ç—Ä–∞ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—Å—Ç–≤–∞  –æ—Ç Azma Finance.pdf', 'pdfs/–ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω  B2B —É—Å–ª—É–≥ –≤ —Å—Ñ–µ—Ä–µ HR –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –æ—Ç Azma Finance.pdf', 'pdfs/–ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω –†–µ–∫–ª–∞–º–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ –æ—Ç Azma Finance .pdf'],
        },
        "uz": {
            'A': ['pdfs/Azma Finance‚Äôdan  event agentlik    biznes-rejasi  .pdf', 'pdfs/Azma Finance‚Äôdan  trenddagi tovarlarni sotish bo‚Äòyicha biznes-reja  .pdf', 'pdfs/Azma Finance‚Äôdan  IT startapining biznes-rejasi.pdf', 'pdfs/Azma Finance‚Äôdan onlayn maktab biznes rejasi .pdf'],
            'B': ['pdfs/Azma Finance‚Äôdan  bolalar rivojlanish markazi   biznes-rejasi  .pdf', 'pdfs/Azma Finance‚Äôdan  onlayn maktabning biznes-rejasi  .pdf', "pdfs/Azma Finance‚Äôdan g'ozallik salonining biznes-rejasi  .pdf", "pdfs/Azma Finance‚Äôdan t'oy agentligining   biznes-rejasi  .pdf"],
            'C': ["pdfs/Azma Finance'dan Konsalting kompaniyasining biznes rejasi.pdf", "pdfs/Azma Finance‚Äôdan repetitorlik markazining biznes rejasi.pdf", 'pdfs/Azma Finance‚Äôdan HR va moliya sohasidagi B2B xizmatlarining biznes-rejasi.pdf', 'pdfs/Azma Finance‚Äôdan reklama agentligini biznes rejasi.pdf'],
        }
    },
    "type_img": {
        "A": "img/1.jpg",
        "B": "img/2.jpg",
        "C": "img/3.jpg"
    },
    
    'results': {
        'ru': {
            'A': '–¢–∏–ø 1 (–ò–Ω–Ω–æ–≤–∞—Ç–æ—Ä): \n‚ö°Ô∏è –ò–≤–µ–Ω—Ç-–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ \n‚ö°Ô∏è –ü—Ä–æ–¥–∞–∂–∞ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ \n‚ö°Ô∏è Startup –≤ IT –∏–ª–∏ e-commerce \n‚ö°Ô∏è –û–Ω–ª–∞–π–Ω —à–∫–æ–ª–∞',
            'B': '–¢–∏–ø 2 (–°–µ—Ä–¥—Ü–µ): \nüíõ –¶–µ–Ω—Ç—Ä –¥–µ—Ç—Å–∫–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è \nüíõ –û–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—ã –ø–æ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é \nüíõ –°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã \nüíõ –°–≤–∞–¥–µ–±–Ω–æ–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ',
            'C': '–¢–∏–ø 3 (–°—Ç—Ä–∞—Ç–µ–≥): \nüß© –ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥ \nüß© –¶–µ–Ω—Ç—Ä —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—Å—Ç–≤–∞ \nüß© B2B-—É—Å–ª—É–≥–∏ (HR, —Ñ–∏–Ω–∞–Ω—Å—ã) \nüß© –†–µ–∫–ª–∞–º–Ω–æ–µ –ê–≥–µ–Ω—Ç—Å—Ç–≤–æ'
        },
        'uz': {
            'A': '1-tur (Innovator): \n‚ö°Ô∏è Tadbirlar agentligi \n‚ö°Ô∏è Zamonaviy mahsulotlar savdosi \n‚ö°Ô∏è IT yoki elektron tijorat sohasidagi startap \n‚ö°Ô∏è Onlayn maktab',
            'B': '2-tur (Yurak): \nüíõ Bolalar rivojlanish markazi \nüíõ O‚Äòzini rivojlantirish bo‚Äòyicha onlayn kurslar \nüíõ Go‚Äòzallik saloni \nüíõ To‚Äòy agentligi',
            'C': '3-tur (Strateg): \nüß© Konsalting \nüß© Repetitorlik markazi \nüß© B2B xizmatlari (masalan, HR yoki moliya sohasida) \nüß© Reklama agentligi'
        }
    },
    'start_text': {
        'ru': "‚ú®–°–µ–π—á–∞—Å —è –∑–∞–¥–∞–º –≤–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî –æ—Ç–≤–µ—á–∞–π—Ç–µ —á–µ—Å—Ç–Ω–æ, –∏ –≤ –∫–æ–Ω—Ü–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–≤–µ—Ç—ã, –∫–∞–∫–æ–π –±–∏–∑–Ω–µ—Å –ª—É—á—à–µ –≤—Å–µ–≥–æ –≤–∞–º –ø–æ–¥–æ–π–¥—ë—Ç!‚ú®",
        'uz': "‚ú®Hozir sizga bir nechta savol beraman ‚Äî to‚Äòg‚Äòri javob bering va oxirida o‚Äòzingizga eng mos keladigan biznes haqida maslahatlar olasiz!‚ú®"
    },
    'request_contact': {
        'ru': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á +998901234567",
        'uz': "Iltimos, ism-familyangiz va telefon raqamingizni quyidagi formatda kiriting:\n\nIvanov Ivan Ivanovich +998901234567"
    },
    'offer_message': {
        'ru': """–•–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–≤–æ–π –±–∏–∑–Ω–µ—Å —Å –Ω—É–ª—è ‚Äî –±—ã—Å—Ç—Ä–æ, –ª–µ–≥–∞–ª—å–Ω–æ –∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ö–ª–æ–ø–æ—Ç?
–ú—ã –±–µ—Ä—ë–º –Ω–∞ —Å–µ–±—è –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å:
‚úî –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ò–ü,
‚úî –û—Ç–∫—Ä—ã—Ç–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á—ë—Ç–∞,
‚úî –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –Ω–∞ —Å—Ç–∞—Ä—Ç–µ.

–†–µ–∞–ª—å–Ω–∞—è —Ä—ã–Ω–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–∞–∫–µ—Ç–∞ ‚Äî ~ 3.000.000 —Å—É–º.
–ù–æ –¥–ª—è –≤–∞—Å, –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º ‚Äî –≤—Å–µ–≥–æ 425.000 —Å—É–º.

–ß—Ç–æ —ç—Ç–æ –¥–∞—ë—Ç:
‚úÖ –≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –Ω–µ—Ä–≤–æ–≤,
‚úÖ –ì—Ä–∞–º–æ—Ç–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –±–µ–∑ –æ—à–∏–±–æ–∫,
‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ, —á—Ç–æ–±—ã –≤—ã —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏–ª–∏—Å—å –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–∏ –±–∏–∑–Ω–µ—Å–∞.

–ï—Å–ª–∏ –≤—ã –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–æ ‚Äî –æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É, –∏ –º—ã –∑–∞–ø—É—Å—Ç–∏–º –≤–∞—à –±–∏–∑–Ω–µ—Å –ø–æ–¥ –∫–ª—é—á.""",

        'uz': """üí• Biznesingizni tez va ortiqcha tashvishsiz yo‚Äòlga qo‚Äòyishni xohlaysizmi?
Biz siz uchun barcha ishlarni amalga oshiramiz:
‚úî YaTTni ro‚Äòyxatdan o‚Äòtkazamiz,
‚úî Bank hisobraqamini ochamiz,
‚úî Boshlang‚Äòich bosqichda maslahatlar bilan ko‚Äòmaklashamiz.

üí∞ Odatdagi narxi ‚Äî taxminan 3.000.000 so‚Äòm,
üî• Siz uchun ‚Äî bor-yo‚Äòg‚Äòi 425.000 so‚Äòm!

Nimalardan bahramand bo‚Äòlasiz:
‚úÖ Vaqt va kuchingizni tejaysiz,
‚úÖ Hujjatlar xatosiz rasmiylashtiriladi,
‚úÖ Biznesingizga e‚Äòtibor qaratishingiz uchun mutaxassislar yordamidan foydalanasiz.

Boshlashga tayyor bo‚Äòlsangiz ‚Äî quyidagi tugmani bosing!"""
    },
    'offer_button': {
        'ru': "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É",
        'uz': "Ariza qoldirish"
    },
    'offer_url': "https://azma.uz/ru/my/get-started/open-ip",
    "dpf_message": {
        "ru": "üìÑ –í–æ—Ç –≤–∞–º –±–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω:",
        "uz": "üìÑ Mana siz uchun biznes-plan:",
    },
}

# User states
user_state = defaultdict(lambda: {
    'lang': None,
    'step': 0,
    'scores': {'A': 0, 'B': 0, 'C': 0},
    'waiting_for_contact': False,
    'contact_info': None
})

# –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —è–∑—ã–∫–æ–≤—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç–¥–µ–ª—å–Ω–æ
user_languages = {}

def schedule_offer_message(chat_id, lang, delay=3600):  # 3600 seconds = 1 hour
    def send_offer(lang=lang):
        time.sleep(delay)            
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton(
            text=data['offer_button'][lang],
            callback_data="submit_contact"
        ))
        bot.send_message(chat_id, data['offer_message'][lang], reply_markup=markup)
    
    thread = threading.Thread(target=send_offer)
    thread.start()


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üá∫üáøUZ", callback_data="lang_uz"))
    markup.add(types.InlineKeyboardButton("üá∑üá∫RU", callback_data="lang_ru"))
    bot.send_message(message.chat.id, "Tilni tanlang \n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data.startswith("lang_"))
def select_language(call):
    lang = call.data.split("_")[1]
    user_id = call.from_user.id

    user_state[user_id]['lang'] = lang
    user_languages[user_id] = lang  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —è–∑—ã–∫ –æ—Ç–¥–µ–ª—å–Ω–æ
    
    user_state[call.from_user.id]['step'] = 0
    user_state[call.from_user.id]['scores'] = {'A': 0, 'B': 0, 'C': 0}
    user_state[call.from_user.id]['waiting_for_contact'] = False

    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.send_message(call.message.chat.id, data['start_text'][lang])
    send_question(call.message.chat.id, call.from_user.id)

def send_question(chat_id, user_id):
    lang = user_state[user_id]['lang']
    step = user_state[user_id]['step']
    questions = data['questions'][lang]

    if step < len(questions):
        q = questions[step]
        markup = types.InlineKeyboardMarkup(row_width=1)
        for text, tag in q['options']:
            markup.add(types.InlineKeyboardButton(text, callback_data=f"ans_{tag}"))
        bot.send_message(chat_id, q['q'], reply_markup=markup)
    else:
        request_contact_info(chat_id, user_id)

def request_contact_info(chat_id, user_id):
    lang = user_state[user_id]['lang']
    user_state[user_id]['waiting_for_contact'] = True
    bot.send_message(chat_id, data['request_contact'][lang])


@bot.message_handler(func=lambda message: user_state.get(message.from_user.id, {}).get('waiting_for_contact', False))
def handle_contact_info(message):
    user_id = message.from_user.id
    contact_info = message.text
    
    user_state[user_id]['contact_info'] = contact_info
    user_state[user_id]['waiting_for_contact'] = False
    
    send_result(message.chat.id, user_id)

    lang = user_state[user_id]['lang']

def send_result(chat_id, user_id):
    scores = user_state[user_id]['scores']
    lang = user_state[user_id]['lang']
    result_type = max(scores, key=scores.get)
    result_text = data['results'][lang][result_type]
    pdf_link = data['pdf_links'][lang][result_type]
    dpf_message = data['dpf_message'][lang]
    photo_path = data["type_img"][result_type]
    result_text = f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî {result_text}" if lang == 'ru' else f"Sizning natijangiz ‚Äî {result_text}"

    with open(photo_path, 'rb') as photo:
        bot.send_photo(chat_id, photo, caption=result_text)
    
    markup = types.InlineKeyboardMarkup()
    button_message = "–•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã?" if lang == 'ru' else "Barcha variantlarni ko'rishni hohlaysizmi?"
    button_text = "–•–æ—á—É!" if lang == 'ru' else "Hohlayman!"
    markup.add(types.InlineKeyboardButton(
        button_text,
        callback_data=f"show_all_{lang}"
    ))

    bot.send_message(chat_id, dpf_message)

    for i in pdf_link:
        with open(i, "rb") as file:
            bot.send_document(chat_id, file)

    bot.send_message(chat_id, button_message, reply_markup=markup)

    schedule_offer_message(chat_id, lang)


@bot.callback_query_handler(func=lambda call: call.data.startswith("show_all_"))
def show_all_options(call):
    lang = call.data.split("_")[2]
    
    all_results = data['results'][lang]
    
    for result_type, result_text in all_results.items():
        pdf_link = data["pdf_links"][lang][result_type]
        bot.send_message(call.message.chat.id, f"{result_text}")
    
        bot.send_message(call.message.chat.id, f"{data['dpf_message'][lang]}")
        for i in pdf_link:
            with open(i, "rb") as file:
                bot.send_document(call.message.chat.id, file)

    bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda call: call.data == "submit_contact")
def handle_submit_contact(call):
    user_name = call.from_user.username
    user_id = call.from_user.id
    chat_id = call.message.chat.id
    
    contact_info = user_state[user_id]['contact_info']

    url = f"https://api.telegram.org/bot8038814392:AAEj-Yh0SiujDSmtT7KWpFGErCn-crEF2ts/sendMessage"
    params = {
        "chat_id": -1002578623157,
        "text": f"‚úÖ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user_name}\n"
                f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {contact_info}"
    }
    requests.post(url, params=params)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.answer_callback_query(call.id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
    
    # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ –ª–∏—á–∫—É
    lang = user_state[user_id]['lang']
    bot.send_message(
        chat_id,
        "–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è." if lang == 'ru' 
        else "Rahmat! Tez orada siz bilan bog'lanamiz."
    )

    user_state.pop(user_id, None)


@bot.callback_query_handler(func=lambda call: call.data.startswith("ans_"))
def handle_answer(call):
    user_id = call.from_user.id
    answer = call.data.split("_")[1]
    user_state[user_id]['scores'][answer] += 1
    user_state[user_id]['step'] += 1

    bot.delete_message(call.message.chat.id, call.message.message_id)
    send_question(call.message.chat.id, user_id)

bot.polling(non_stop=True)
