import asyncio
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import logging
import os
from datetime import datetime
from database import Database
import aiohttp
from analyze_users import analyze_users_combined

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_dir = "logs"
if not os.path.exists(log_dir):
    os.makedirs(log_dir)

current_date = datetime.now().strftime("%Y-%m-%d")
log_file = f"{log_dir}/bot_{current_date}.log"

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_file, encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Bot configuration
TOKEN = '8038814392:AAEj-Yh0SiujDSmtT7KWpFGErCn-crEF2ts'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database(
    host="localhost",
    user="root",
    password="",
    database="tg_bot"
)

# Language questions and PDFs
questions_data = {
    'ru': [
        {"q": "–ö–∞–∫ –≤—ã –æ–±—ã—á–Ω–æ —Ä–µ—à–∞–µ—Ç–µ —Ä–∞–±–æ—á–∏–µ –∑–∞–¥–∞—á–∏?", "options": [("‚ö°Ô∏è–î–µ–π—Å—Ç–≤—É—é —Å—Ä–∞–∑—É, —Ä–∞–∑–±–∏—Ä–∞—è—Å—å –ø–æ —Ö–æ–¥—É.", "A"), ("üîç–°–Ω–∞—á–∞–ª–∞ —Å–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.", "B"), ("ü§ù–ü–µ—Ä–µ–¥–∞—é –∑–∞–¥–∞—á—É –¥—Ä—É–≥–æ–º—É.", "C")]},
        {"q": "–ß—Ç–æ –≤–∞–º –±–æ–ª—å—à–µ –Ω—Ä–∞–≤–∏—Ç—Å—è?", "options": [("üó£Ô∏è –û–±—â–µ–Ω–∏–µ", "A"), ("üíª –û–Ω–ª–∞–π–Ω –∏ —Ü–∏—Ñ—Ä—ã", "B"), ("‚ú® –ö—Ä–∞—Å–æ—Ç–∞ –∏ –Ω–æ–≤–æ–µ", "C")]},
        {"q": "–ö–∞–∫–∞—è –≤–∞—à–∞ –≥–ª–∞–≤–Ω–∞—è —Å–∏–ª—å–Ω–∞—è —Å—Ç–æ—Ä–æ–Ω–∞?", "options": [("‚ö°Ô∏è –≠–Ω–µ—Ä–≥–∏—è", "A"), ("üîç –í–Ω–∏–º–∞–Ω–∏–µ –∫ –¥–µ—Ç–∞–ª—è–º", "B"), ("üé® –í–∫—É—Å –∏ —Å—Ç–∏–ª—å", "C")]},
        {"q": "–ß—Ç–æ —Å–∏–ª—å–Ω–µ–µ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –≤–∞—Å –Ω–∞ —Ä–∞–±–æ—Ç–µ?", "options": [("üèÜ –ü–æ–±–µ–¥–∞ –∏ –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ", "A"), ("üíõ –û—â—É—â–µ–Ω–∏–µ –ø–æ–ª—å–∑—ã –∏ —Å–º—ã—Å–ª–∞", "B"), ("üìã –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –ø–æ—Ä—è–¥–æ–∫", "C")]},
        {"q": "–ö–∞–∫–æ–π —Å—Ç–∏–ª—å –∂–∏–∑–Ω–∏ –≤–∞–º –±–ª–∏–∂–µ?", "options": [("üèÉ –ê–∫—Ç–∏–≤–Ω—ã–π", "A"), ("üßò –°–ø–æ–∫–æ–π–Ω—ã–π", "B"), ("üåà –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–π", "C")]},
        {"q": "–ß—Ç–æ –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç?", "options": [("üìà –†–æ—Å—Ç –∏ —É—Å–ø–µ—Ö", "A"), ("ü§ù –ü–æ–º–æ—â—å –ª—é–¥—è–º", "B"), ("üé® –ö—Ä–∞—Å–æ—Ç–∞", "C")]},
        {"q": "–ï—Å–ª–∏ –±—ã –≤—ã —Å–æ–∑–¥–∞–ª–∏ —Å–≤–æ–π –±—Ä–µ–Ω–¥, —á—Ç–æ –±—ã–ª–æ –±—ã –Ω–∞ –ø–µ—Ä–≤–æ–º –ø–ª–∞–Ω–µ?", "options": [("‚ú® –Ø—Ä–∫–∏–π —Å—Ç–∏–ª—å", "A"), ("üõ†Ô∏è –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥—É–∫—Ç–∞", "B"), ("ü§ù –ü–æ–ª—å–∑–∞ –¥–ª—è –ª—é–¥–µ–π –∏ –æ–±—â–µ—Å—Ç–≤–∞", "C")]},
        {"q": "–ß—Ç–æ –¥–ª—è –≤–∞—Å –≤–∞–∂–Ω–µ–µ –≤ —Ä–∞–±–æ—Ç–µ?", "options": [("‚ù§Ô∏è–õ—é–±–æ–≤—å –∫ –¥–µ–ª—É", "A"), ("üí∞ –î–æ—Ö–æ–¥", "B"), ("üïäÔ∏è –°–≤–æ–±–æ–¥–∞", "C")]},
        {"q": "–ö–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –±–∏–∑–Ω–µ—Å–∞ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–µ–Ω?", "options": [("üåê –û–Ω–ª–∞–π–Ω", "A"), ("üè¨ –û—Ñ–ª–∞–π–Ω", "B"), ("üîÄ –°–º–µ—à–∞–Ω–Ω—ã–π", "C")]},
        {"q": "–ß–µ–º –±—ã –≤—ã –∑–∞–Ω–∏–º–∞–ª–∏—Å—å –¥–∞–∂–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ?", "options": [("üìö –û–±—É—á–µ–Ω–∏–µ–º –∏–ª–∏ –ø–æ–º–æ—â—å—é", "A"), ("üé® –ö—Ä–∞—Å–æ—Ç–æ–π –∏–ª–∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ–º", "B"), ("üíª –û–Ω–ª–∞–π–Ω-–ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏–ª–∏ —Å–æ—Ü—Å–µ—Ç—è–º–∏", "C")]},
        {"q": "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ: –≤—ã –Ω–∞ —Å—Ç–∞—Ä—Ç–µ –±–∏–∑–Ω–µ—Å–∞. –ö–∞–∫–æ–π –≤–∞—à –ø–µ—Ä–≤—ã–π —à–∞–≥?", "options": [("üì£ –ó–∞—è–≤–ª—é –æ —Å–µ–±–µ –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö", "A"), ("üìä –°–¥–µ–ª–∞—é –±–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω –∏ –ø—Ä–æ—Å—á–∏—Ç–∞—é –≤—Å–µ", "B"), ("ü§ù –°–æ–±–µ—Ä—É –µ–¥–∏–Ω–æ–º—ã—à–ª–µ–Ω–Ω–∏–∫–æ–≤ –∏ –∫–æ–º–∞–Ω–¥—É", "C")]},
    ],
    'uz': [
        {"q": "Ish vazifalarini qanday hal etasiz?", "options": [("Darhol boshlayman ‚ö°Ô∏è", "A"), ("Ma'lumot yig'aman üìö", "B"), ("Boshqalarga topshiraman ü§ù", "C")]},
        {"q": "Qaysi vazifa sizga ko'proq yoqadi?", "options": [("Muammolarni hal qilish üõ†Ô∏è", "A"), ("Jarayonlarni yaxshilash üîß", "B"), ("Yangi loyihalarni boshlash üöÄ", "C")]},
        {"q": "Sizga nima ko'proq yoqadi?", "options": [("Muloqot üó£Ô∏è", "A"), ("Internet va raqamlar üíª", "B"), ("Go'zallik va yangiliklar ‚ú®", "C")]},
        {"q": "Sizning eng asosiy kuchli tomoningiz qaysi?", "options": [("G'ayrat üí™", "A"), ("Tafsilotlarga e'tibor üîç", "B"), ("Did va uslub üé®", "C")]},
        {"q": "Ishda sizni nima rag'batlantiradi?", "options": [("G'alaba va e'tirof üèÜ", "A"), ("Foydali ish ‚ù§Ô∏è", "B"), ("Samaradorlik va tartib üìä", "C")]},
        {"q": "Qanday hayot tarzi yoqadi?", "options": [("Faol üí•", "A"), ("Tinch üåø", "B"), ("Rang-barang üåà", "C")]},
        {"q": "Stressni qanday yengasiz?", "options": [("Sport yoki yurish üèÉ‚Äç‚ôÇÔ∏è", "A"), ("Do'stlar bilan gaplashib", "B"), ("Yolg'izlikda dam olib üåô", "C")]},
        {"q": "Sizni eng ko'p nima ruhlantiradi?", "options": [("O'sish va muvaffaqiyat üöÄ", "A"), ("Insonlarga yordam ko'rsatish ü§ù", "B"), ("Go'zallik üé®", "C")]},
        {"q": "Muvaffaqiyat siz uchun nima?", "options": [("Pul va obro' üí∞‚ú®", "A"), ("Ma'no va qadriyat üí°‚ù§Ô∏è", "B"), ("Erkinlik va vaqt üïäÔ∏è‚è∞", "C")]},
        {"q": "Yangi narsalarni qanday o'rganasiz?", "options": [("Amalda sinab ko'rib üîßüí•", "A"), ("Kitob yoki kurslardan üìöüéì", "B"), ("Boshqalardan o'rganib üë•üí¨", "C")]},
        {"q": "Sizni orzuyingizdagi natijaga eng tez yetkazadigan narsa nima, deb o'ylaysiz?", "options": [("Yaxshi jamoa üë•", "A"), ("To'g'ri strategiya üìä", "B"), ("Moliyaviy resurslar üí∞", "C")]},
    ]
}

data = {
    'questions': questions_data,
    'pdf_links': {
        "ru": {
            'A': ['pdfs/–ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω –ò–≤–µ–Ω—Ç –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ –æ—Ç Azma Finance.pdf', 'pdfs/–ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω –ø–æ –ø—Ä–æ–¥–∞–∂–µ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤  –æ—Ç Azma Finance.pdf', 'pdfs/–ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω IT –°—Ç–∞—Ä—Ç–∞–ø–∞ –æ—Ç Azma Finance.pdf', 'pdfs/–ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω –æ–Ω–ª–∞–∏ÃÜ–Ω —à–∫–æ–ª—ã  –æ—Ç Azma Finance .pdf'],
            'B': ['pdfs/–ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω —Ü–µ–Ω—Ç—Ä–∞ –¥–µ—Ç—Å–∫–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è  –æ—Ç Azma Finance.pdf', 'pdfs/–ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω  –æ–Ω–ª–∞–∏ÃÜ–Ω —à–∫–æ–ª—ã –ø–æ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é  –æ—Ç Azma Finance.pdf', 'pdfs/–ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω —Å–∞–ª–æ–Ω–∞ –∫—Ä–∞—Å–æ—Ç—ã –æ—Ç Azma Finance.pdf', 'pdfs/–ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω —Å–≤–∞–¥–µ–±–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ –æ—Ç Azma Finance.pdf'],
            'C': ['pdfs/–ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω –ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥–æ–≤–æ–∏ÃÜ –∫–æ–º–ø–∞–Ω–∏–∏  –æ—Ç Azma Finance .pdf', 'pdfs/–ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω —Ü–µ–Ω—Ç—Ä–∞ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—Å—Ç–≤–∞  –æ—Ç Azma Finance.pdf', 'pdfs/–ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω  B2B —É—Å–ª—É–≥ –≤ —Å—Ñ–µ—Ä–µ HR –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –æ—Ç Azma Finance.pdf', 'pdfs/–ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω –†–µ–∫–ª–∞–º–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ –æ—Ç Azma Finance .pdf'],
        },
        "uz": {
            'A': ['pdfs/Azma Finance‚Äôdan  event agentlik    biznes-rejasi  .pdf', 'pdfs/Azma Finance‚Äôdan  trenddagi tovarlarni sotish bo‚Äòyicha biznes-reja  .pdf', 'pdfs/Azma Finance‚Äôdan  IT startapining biznes-rejasi.pdf', 'pdfs/Azma Finance‚Äôdan onlayn maktab biznes rejasi .pdf'],
            'B': ['pdfs/Azma Finance‚Äôdan  bolalar rivojlanish markazi   biznes-rejasi  .pdf', 'pdfs/Azma Finance‚Äôdan  onlayn maktabning biznes-rejasi  .pdf', "pdfs/Azma Finance‚Äôdan g'ozallik salonining biznes-rejasi  .pdf", "pdfs/Azma Finance‚Äôdan t'oy agentligining   biznes-rejasi  .pdf"],
            'C': ["pdfs/Azma Finance'dan Konsalting kompaniyasining biznes rejasi.pdf", "pdfs/Azma Finance‚Äôdan repetitorlik markazining biznes rejasi.pdf", 'pdfs/Azma Finance‚Äôdan HR va moliya sohasidagi B2B xizmatlarining biznes-rejasi.pdf', 'pdfs/Azma Finance‚Äôdan reklama agentligini biznes rejasi.pdf'],
        }
    },
    "type_img": {
        "A": "img/1.jpg",
        "B": "img/2.jpg",
        "C": "img/3.jpg"
    },
    'results': {
        'ru': {
            'A': '–¢–∏–ø 1 (–ò–Ω–Ω–æ–≤–∞—Ç–æ—Ä): \n‚ö°Ô∏è –ò–≤–µ–Ω—Ç-–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ \n‚ö°Ô∏è –ü—Ä–æ–¥–∞–∂–∞ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ \n‚ö°Ô∏è Startup –≤ IT –∏–ª–∏ e-commerce \n‚ö°Ô∏è –û–Ω–ª–∞–π–Ω —à–∫–æ–ª–∞',
            'B': '–¢–∏–ø 2 (–°–µ—Ä–¥—Ü–µ): \nüíõ –¶–µ–Ω—Ç—Ä –¥–µ—Ç—Å–∫–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è \nüíõ –û–Ω–ª–∞–π–Ω-–∫—É—Ä—Å—ã –ø–æ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é \nüíõ –°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã \nüíõ –°–≤–∞–¥–µ–±–Ω–æ–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ',
            'C': '–¢–∏–ø 3 (–°—Ç—Ä–∞—Ç–µ–≥): \nüß© –ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥ \nüß© –¶–µ–Ω—Ç—Ä —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—Å—Ç–≤–∞ \nüß© B2B-—É—Å–ª—É–≥–∏ (HR, —Ñ–∏–Ω–∞–Ω—Å—ã) \nüß© –†–µ–∫–ª–∞–º–Ω–æ–µ –ê–≥–µ–Ω—Ç—Å—Ç–≤–æ'
        },
        'uz': {
            'A': '1-tur (Innovator): \n‚ö°Ô∏è Tadbirlar agentligi \n‚ö°Ô∏è Zamonaviy mahsulotlar savdosi \n‚ö°Ô∏è IT yoki elektron tijorat sohasidagi startap \n‚ö°Ô∏è Onlayn maktab',
            'B': "2-tur (Yurak): \nüíõ Bolalar rivojlanish markazi \nüíõ O'zini rivojlantirish bo'yicha onlayn kurslar \nüíõ Go'zallik saloni \nüíõ To'y agentligi",
            'C': '3-tur (Strateg): \nüß© Konsalting \nüß© Repetitorlik markazi \nüß© B2B xizmatlari (masalan, HR yoki moliya sohasida) \nüß© Reklama agentligi'
        }
    },
    'start_text': {
        'ru': "‚ú®–°–µ–π—á–∞—Å —è –∑–∞–¥–∞–º –≤–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ ‚Äî –æ—Ç–≤–µ—á–∞–π—Ç–µ —á–µ—Å—Ç–Ω–æ, –∏ –≤ –∫–æ–Ω—Ü–µ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Å–æ–≤–µ—Ç—ã, –∫–∞–∫–æ–π –±–∏–∑–Ω–µ—Å –ª—É—á—à–µ –≤—Å–µ–≥–æ –≤–∞–º –ø–æ–¥–æ–π–¥—ë—Ç!‚ú®\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /restart, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.",
        'uz': "‚ú®Hozir sizga bir nechta savol beraman ‚Äî to'g'ri javob bering va oxirida o'zingizga eng mos keladigan biznes haqida maslahatlar olasiz!‚ú®\n\nQayta boshlash uchun /restart dan foydalaning."
    },
    'request_contact': {
        'ru': "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üìû",
        'uz': "Iltimos, telefon raqamingizni yuborish uchun quyidagi tugmani bosing üìû"
    },
    'offer_message': {
        'ru': """–•–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–≤–æ–π –±–∏–∑–Ω–µ—Å —Å –Ω—É–ª—è ‚Äî –±—ã—Å—Ç—Ä–æ, –ª–µ–≥–∞–ª—å–Ω–æ –∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ö–ª–æ–ø–æ—Ç?
–ú—ã –±–µ—Ä—ë–º –Ω–∞ —Å–µ–±—è –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å:
‚úî –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ò–ü,
‚úî –û—Ç–∫—Ä—ã—Ç–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á—ë—Ç–∞,
‚úî –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –Ω–∞ —Å—Ç–∞—Ä—Ç–µ.

–†–µ–∞–ª—å–Ω–∞—è —Ä—ã–Ω–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–∞–∫–µ—Ç–∞ ‚Äî ~ 3.000.000 —Å—É–º.
–ù–æ –¥–ª—è –≤–∞—Å, –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º ‚Äî –≤—Å–µ–≥–æ 425.000 —Å—É–º.

–ß—Ç–æ —ç—Ç–æ –¥–∞—ë—Ç:
‚úÖ –≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –Ω–µ—Ä–≤–æ–≤,
‚úÖ –ì—Ä–∞–º–æ—Ç–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –±–µ–∑ –æ—à–∏–±–æ–∫,
‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ, —á—Ç–æ–±—ã –≤—ã —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏–ª–∏—Å—å –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–∏ –±–∏–∑–Ω–µ—Å–∞.

–ï—Å–ª–∏ –≤—ã –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–æ ‚Äî –æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É, –∏ –º—ã –∑–∞–ø—É—Å—Ç–∏–º –≤–∞—à –±–∏–∑–Ω–µ—Å –ø–æ–¥ –∫–ª—é—á.""",
        'uz': """üí• Biznesingizni tez va ortiqcha tashvishsiz yo'lga qo'yishni xohlaysizmi?
Biz siz uchun barcha ishlarni amalga oshiramiz:
‚úî YaTTni ro'yxatdan o'tkazamiz,
‚úî Bank hisobraqamini ochamiz,
‚úî Boshlang'ich bosqichda maslahatlar bilan ko'maklashamiz.

üí∞ Odatdagi narxi ‚Äî taxminan 3.000.000 so'm,
üî• Siz uchun ‚Äî bor-yo'g'i 425.000 so'm!

Nimalardan bahramand bo'lasiz:
‚úÖ Vaqt va kuchingizni tejaysiz,
‚úÖ Hujjatlar xatosiz rasmiylashtiriladi,
‚úÖ Biznesingizga e'tibor qaratishingiz uchun mutaxassislar yordamidan foydalanasiz.

Boshlashga tayyor bo'lsangiz ‚Äî quyidagi tugmani bosing!"""
    },
    'offer_button': {
        'ru': "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É",
        'uz': "Ariza qoldirish"
    },
    'offer_url': "https://azma.uz/ru/my/get-started/open-ip",
    "dpf_message": {
        "ru": "üìÑ –í–æ—Ç –≤–∞–º –±–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω:",
        "uz": "üìÑ Mana siz uchun biznes-plan:"
    }
}

async def schedule_offer_message(context: ContextTypes.DEFAULT_TYPE, chat_id: int, lang: str, delay: int = 10):
    try:
        await asyncio.sleep(delay)
        markup = InlineKeyboardMarkup([[
            InlineKeyboardButton(text=data['offer_button'][lang], callback_data="submit_contact")
        ]])
        await context.bot.send_message(chat_id=chat_id, text=data['offer_message'][lang], reply_markup=markup)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞
        user_state = db.get_user_state(chat_id)
        user_state['offer_scheduled_at'] = datetime.now()
        db.save_user_state(chat_id, user_state)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–ª—è chat_id {chat_id}: {str(e)}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        user_state = db.get_user_state(user_id)
        db.save_user_state(user_id, user_state)

        markup = InlineKeyboardMarkup([[
            InlineKeyboardButton("üá∫üáøUZ", callback_data="lang_uz"),
            InlineKeyboardButton("üá∑üá∫RU", callback_data="lang_ru")
        ]])
        await update.message.reply_text("Tilni tanlang \n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫", reply_markup=markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start –¥–ª—è user_id {user_id}: {str(e)}")

async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        user_state = db.get_user_state(user_id)
        user_state.update({
            'lang': None,
            'step': 0,
            'scores': {'A': 0, 'B': 0, 'C': 0},
            'waiting_for_contact': False,
            'contact_info': None,
            'offer_scheduled_at': None
        })
        db.save_user_state(user_id, user_state)

        markup = InlineKeyboardMarkup([[
            InlineKeyboardButton("üá∫üáøUZ", callback_data="lang_uz"),
            InlineKeyboardButton("üá∑üá∫RU", callback_data="lang_ru")
        ]])
        await update.message.reply_text("Tilni tanlang \n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫", reply_markup=markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ restart –¥–ª—è user_id {user_id}: {str(e)}")

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ (–∑–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è) –≤ Telegram-–≥—Ä—É–ø–ø—É"""
    try:
        user_id = update.effective_user.id
        logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /stats –≤—ã–∑–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ—Å—Ç—É–ø
        allowed_users = [7969873927]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö user_id
        if user_id not in allowed_users:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return

        # –í—ã–∑—ã–≤–∞–µ–º –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        report = await analyze_users_combined(send_to_telegram=True)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await update.message.reply_text("–û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ stats –¥–ª—è user_id {user_id}: {str(e)}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞.")

async def select_language(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        lang = query.data.split("_")[1]
        user_id = query.from_user.id

        user_state = db.get_user_state(user_id)
        user_state.update({
            'lang': lang,
            'step': 0,
            'scores': {'A': 0, 'B': 0, 'C': 0},
            'waiting_for_contact': False,
            'contact_info': user_state.get('contact_info'),  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–∞–∫—Ç
            'offer_scheduled_at': None
        })
        db.save_user_state(user_id, user_state)

        await query.message.delete()
        await context.bot.send_message(query.message.chat_id, data['start_text'][lang])
        await send_question(context, query.message.chat_id, user_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ select_language –¥–ª—è user_id {user_id}: {str(e)}")

async def send_question(context: ContextTypes.DEFAULT_TYPE, chat_id: int, user_id: int):
    try:
        user_state = db.get_user_state(user_id)
        lang = user_state['lang']
        step = user_state['step']
        questions = data['questions'][lang]

        if step < len(questions):
            q = questions[step]
            buttons = [[InlineKeyboardButton(text, callback_data=f"ans_{tag}")] for text, tag in q['options']]
            if step > 0:
                buttons.append([InlineKeyboardButton(
                    "‚¨Ö –ù–∞–∑–∞–¥" if lang == 'ru' else "‚¨Ö Orqaga",
                    callback_data="go_back"
                )])
            markup = InlineKeyboardMarkup(buttons)
            progress = f"–í–æ–ø—Ä–æ—Å {step + 1}/{len(questions)}"
            await context.bot.send_message(chat_id, f"{progress}\n{q['q']}", reply_markup=markup)
        else:
            await request_contact_info(context, chat_id, user_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_question –¥–ª—è user_id {user_id}: {str(e)}")

async def request_contact_info(context: ContextTypes.DEFAULT_TYPE, chat_id: int, user_id: int):
    try:
        user_state = db.get_user_state(user_id)
        lang = user_state['lang']
        
        user_state['waiting_for_contact'] = True
        db.save_user_state(user_id, user_state)

        markup = ReplyKeyboardMarkup([[KeyboardButton(
            "üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç" if lang == 'ru' else "üìû Kontaktni yuborish",
            request_contact=True
        )]], one_time_keyboard=True, resize_keyboard=True)
        await context.bot.send_message(chat_id, data['request_contact'][lang], reply_markup=markup)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ request_contact_info –¥–ª—è user_id {user_id}: {str(e)}")

async def handle_contact_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        contact = update.message.contact
        
        user_state = db.get_user_state(user_id)
        lang = user_state['lang'] or 'ru'
        
        if contact:
            contact_info = {
                'phone_number': contact.phone_number,
                'first_name': contact.first_name,
                'last_name': contact.last_name if contact.last_name else None
            }
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
            user_state.update({
                'contact_info': contact_info,
                'waiting_for_contact': False
            })
            success = db.save_user_state(user_id, user_state)
            
            if not success:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è user_id {user_id}")
                await update.message.reply_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑." if lang == 'ru' else
                    "Kontaktni saqlashda xatolik yuz berdi. Yana urinib ko‚Äòring.",
                    reply_markup=ReplyKeyboardRemove()
                )
                return
            
            # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
            db.log_action(user_id, 'contact_provided', {'phone_number': contact.phone_number})
            
            # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await update.message.reply_text(
                "–°–ø–∞—Å–∏–±–æ! –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—É—á–µ–Ω." if lang == 'ru' else "Rahmat! Kontaktingiz qabul qilindi.",
                reply_markup=ReplyKeyboardRemove()
            )
            
            await send_result(context, update.effective_chat.id, user_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_contact_info –¥–ª—è user_id {user_id}: {str(e)}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑." if user_state.get('lang') == 'ru' else
            "Xatolik yuz berdi. Yana urinib ko‚Äòring.",
            reply_markup=ReplyKeyboardRemove()
        )

async def send_result(context: ContextTypes.DEFAULT_TYPE, chat_id: int, user_id: int):
    try:
        user_state = db.get_user_state(user_id)
        scores = user_state['scores']
        lang = user_state['lang']
        result_type = max(scores, key=scores.get)
        result_text = data['results'][lang][result_type]
        pdf_links = data['pdf_links'][lang][result_type]
        dpf_message = data['dpf_message'][lang]
        photo_path = data["type_img"][result_type]
        result_text = f"–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚Äî {result_text}" if lang == 'ru' else f"Sizning natijangiz ‚Äî {result_text}"

        if not os.path.exists(photo_path):
            logger.warning(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {photo_path} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ")
        else:
            with open(photo_path, 'rb') as photo:
                await context.bot.send_photo(chat_id, photo, caption=result_text)

        markup = InlineKeyboardMarkup([[
            InlineKeyboardButton(
                "–•–æ—á—É!" if lang == 'ru' else "Hohlayman!",
                callback_data=f"show_all_{lang}"
            )
        ]])
        await context.bot.send_message(chat_id, dpf_message)
        
        for pdf in pdf_links:
            if not os.path.exists(pdf):
                logger.warning(f"PDF {pdf} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            else:
                with open(pdf, 'rb') as file:
                    await context.bot.send_document(chat_id, file)

        await context.bot.send_message(
            chat_id,
            "–•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã?" if lang == 'ru' else "Barcha variantlarni ko'rishni hohlaysizmi?",
            reply_markup=markup
        )

        asyncio.create_task(schedule_offer_message(context, chat_id, lang))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_result –¥–ª—è user_id {user_id}: {str(e)}")

async def show_all_options(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        lang = query.data.split("_")[2]
        chat_id = query.message.chat_id
        user_id = query.from_user.id

        all_results = data['results'][lang]
        for result_type, result_text in all_results.items():
            pdf_links = data["pdf_links"][lang][result_type]
            await context.bot.send_message(chat_id, f"{result_text}")
            await context.bot.send_message(chat_id, f"{data['dpf_message'][lang]}")
            for pdf in pdf_links:
                if not os.path.exists(pdf):
                    logger.warning(f"PDF {pdf} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                else:
                    with open(pdf, 'rb') as file:
                        await context.bot.send_document(chat_id, file)

        await query.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_all_options –¥–ª—è user_id {user_id}: {str(e)}")

async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        user_id = query.from_user.id
        chat_id = query.message.chat_id
        callback_data = query.data

        user_state = db.get_user_state(user_id)

        if callback_data.startswith("ans_"):
            answer = callback_data.split("_")[1]
            user_state['scores'][answer] = user_state['scores'].get(answer, 0) + 1
            user_state['step'] += 1
            db.save_user_state(user_id, user_state)
            await query.answer()
            await query.message.delete()
            await send_question(context, chat_id, user_id)

        elif callback_data == "go_back":
            if user_state['step'] > 0:
                user_state['step'] -= 1
                db.save_user_state(user_id, user_state)
            await query.answer()
            await query.message.delete()
            await send_question(context, chat_id, user_id)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_answer –¥–ª—è user_id {user_id}: {str(e)}")

async def handle_submit_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        user_id = query.from_user.id
        chat_id = query.message.chat_id
        username = query.from_user.username or "No username"
        
        user_state = db.get_user_state(user_id)
        lang = user_state['lang'] or 'ru'
        contact_info = user_state.get('contact_info')

        if not contact_info:
            # –ï—Å–ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –ø—Ä–æ—Å–∏–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
            await query.answer("–°–Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!")
            await request_contact_info(context, chat_id, user_id)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        contact_str = f"–ù–æ–º–µ—Ä: {contact_info['phone_number']}"
        if contact_info.get('first_name'):
            contact_str += f"\n–ò–º—è: {contact_info['first_name']}"
        if contact_info.get('last_name'):
            contact_str += f"\n–§–∞–º–∏–ª–∏—è: {contact_info['last_name']}"

        async with aiohttp.ClientSession() as session:
            params = {
                "chat_id": -1002578623157,
                "text": f"‚úÖ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\nüìû –ö–æ–Ω—Ç–∞–∫—Ç:\n{contact_str}"
            }
            async with session.post(
                f"https://api.telegram.org/bot{TOKEN}/sendMessage",
                params=params
            ) as response:
                if response.status != 200:
                    logger.error(f"–û—à–∏–±–∫–∞ API Telegram: {await response.text()}")
                    await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏!")
                    return

        # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        db.log_action(user_id, 'application_submitted', {'contact_info': contact_info})

        await query.answer("‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        await context.bot.send_message(
            chat_id,
            "–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è." if lang == 'ru'
            else "Rahmat! Tez orada siz bilan bog'lanamiz."
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_submit_contact –¥–ª—è user_id {user_id}: {str(e)}")
        await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏!")
        await context.bot.send_message(
            chat_id,
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑." if user_state.get('lang') == 'ru'
            else "Xatolik yuz berdi. Yana urinib ko‚Äòring."
        )

async def restore_pending_offers(application):
    now = datetime.now()
    for user_id, user in db.get_all_users().items():
        scheduled_at = user.get("offer_scheduled_at")
        if scheduled_at:
            delta = (now - scheduled_at).total_seconds()
            if delta < 3600:
                delay = 3600 - delta
                logger.info(f"–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–∞ –¥–ª—è user_id {user_id}, –æ—Å—Ç–∞–ª–æ—Å—å {delay} —Å–µ–∫")
                asyncio.create_task(schedule_offer_message(application.bot, user_id, user['lang'], delay))

def main():
    try:
        # –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        db.cleanup_old_records(days=7)
        
        application = Application.builder().token(TOKEN).build()

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("restart", restart))
        application.add_handler(CommandHandler("stats", stats))
        application.add_handler(CallbackQueryHandler(select_language, pattern="^lang_"))
        application.add_handler(CallbackQueryHandler(handle_answer, pattern="^ans_"))
        application.add_handler(CallbackQueryHandler(handle_answer, pattern="^go_back$"))
        application.add_handler(CallbackQueryHandler(show_all_options, pattern="show_all_"))
        application.add_handler(CallbackQueryHandler(handle_submit_contact, pattern="^submit_contact$"))
        application.add_handler(MessageHandler(filters.CONTACT, handle_contact_info))

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ—Ñ—Ñ–µ—Ä–æ–≤ –≤ —Ç–æ–º –∂–µ event loop
        application.post_init = restore_pending_offers

        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        application.run_polling()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ main: {str(e)}")
        raise

if __name__ == '__main__':
    main()