import logging
import os
from datetime import datetime, timedelta
from database import Database
import aiohttp
import asyncio
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log_dir = "logs"
if not os.path.exists(log_dir):
    os.makedirs(log_dir)

current_date = datetime.now().strftime("%Y-%m-%d")
log_file = f"{log_dir}/offer_checker_{current_date}.log"

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler(log_file, encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Telegram bot token –∏ chat_id
TOKEN = '8038814392:AAEj-Yh0SiujDSmtT7KWpFGErCn-crEF2ts'
CHAT_ID = -1002578623157

# –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ñ—Ñ–µ—Ä–∞ (–∏–∑ tg_bot_async.py)
OFFER_MESSAGE = {
    'ru': """–•–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–≤–æ–π –±–∏–∑–Ω–µ—Å —Å –Ω—É–ª—è ‚Äî –±—ã—Å—Ç—Ä–æ, –ª–µ–≥–∞–ª—å–Ω–æ –∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ö–ª–æ–ø–æ—Ç?
–ú—ã –±–µ—Ä—ë–º –Ω–∞ —Å–µ–±—è –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å:
‚úî –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ò–ü,
‚úî –û—Ç–∫—Ä—ã—Ç–∏–µ –±–∞–Ω–∫–æ–≤—Å–∫–æ–≥–æ —Å—á—ë—Ç–∞,
‚úî –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –∫–ª—é—á–µ–≤—ã–º –≤–æ–ø—Ä–æ—Å–∞–º –Ω–∞ —Å—Ç–∞—Ä—Ç–µ.

–†–µ–∞–ª—å–Ω–∞—è —Ä—ã–Ω–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–∞–∫–µ—Ç–∞ ‚Äî ~ 3.000.000 —Å—É–º.
–ù–æ –¥–ª—è –≤–∞—Å, –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º ‚Äî –≤—Å–µ–≥–æ 425.000 —Å—É–º.

–ß—Ç–æ —ç—Ç–æ –¥–∞—ë—Ç:
‚úÖ –≠–∫–æ–Ω–æ–º–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –Ω–µ—Ä–≤–æ–≤,
‚úÖ –ì—Ä–∞–º–æ—Ç–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –±–µ–∑ –æ—à–∏–±–æ–∫,
‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ, —á—Ç–æ–±—ã –≤—ã —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏–ª–∏—Å—å –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–∏ –±–∏–∑–Ω–µ—Å–∞.

–ï—Å–ª–∏ –≤—ã –≥–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–æ ‚Äî –æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É, –∏ –º—ã –∑–∞–ø—É—Å—Ç–∏–º –≤–∞—à –±–∏–∑–Ω–µ—Å –ø–æ–¥ –∫–ª—é—á.""",
    'uz': """üí• Biznesingizni tez va ortiqcha tashvishsiz yo'lga qo'yishni xohlaysizmi?
Biz siz uchun barcha ishlarni amalga oshiramiz:
‚úî YaTTni ro'yxatdan o'tkazamiz,
‚úî Bank hisobraqamini ochamiz,
‚úî Boshlang'ich bosqichda maslahatlar bilan ko'maklashamiz.

üí∞ Odatdagi narxi ‚Äî taxminan 3.000.000 so'm,
üî• Siz uchun ‚Äî bor-yo'g'i 425.000 so'm!

Nimalardan bahramand bo'lasiz:
‚úÖ Vaqt va kuchingizni tejaysiz,
‚úÖ Hujjatlar xatosiz rasmiylashtiriladi,
‚úÖ Biznesingizga e'tibor qaratishingiz uchun mutaxassislar yordamidan foydalanasiz.

Boshlashga tayyor bo'lsangiz ‚Äî quyidagi tugmani bosing!"""
}

OFFER_BUTTON = {
    'ru': "–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É",
    'uz': "Ariza qoldirish"
}

async def send_offer_to_user(chat_id: int, lang: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ñ—Ñ–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram"""
    try:
        async with aiohttp.ClientSession() as session:
            markup = {
                "inline_keyboard": [[
                    {"text": OFFER_BUTTON[lang], "callback_data": "submit_contact"}
                ]]
            }
            params = {
                "chat_id": chat_id,
                "text": OFFER_MESSAGE[lang],
                "reply_markup": json.dumps(markup)
            }
            async with session.post(
                f"https://api.telegram.org/bot{TOKEN}/sendMessage",
                params=params
            ) as response:
                if response.status != 200:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ñ—Ñ–µ—Ä–∞ –¥–ª—è chat_id {chat_id}: {await response.text()}")
                    return False
                logger.info(f"–û—Ñ—Ñ–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è chat_id {chat_id}")
                return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ñ—Ñ–µ—Ä–∞ –¥–ª—è chat_id {chat_id}: {str(e)}")
        return False

async def check_and_send_offers():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ñ—Ñ–µ—Ä–æ–≤"""
    try:
        logger.info("–ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ñ—Ñ–µ—Ä–æ–≤")
        db = Database()
        users = db.get_all_users()

        if not users:
            logger.warning("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return

        now = datetime.now()
        one_hour_ago = now - timedelta(hours=1)

        for user_id, user_data in users.items():
            lang = user_data.get('lang', 'ru')  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 'ru', –µ—Å–ª–∏ —è–∑—ã–∫ –Ω–µ —É–∫–∞–∑–∞–Ω
            last_interaction = user_data.get('last_interaction')
            offer_scheduled_at = user_data.get('offer_scheduled_at')

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –æ—Ñ—Ñ–µ—Ä —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
            if offer_scheduled_at:
                logger.debug(f"–ü—Ä–æ–ø—É—â–µ–Ω user_id {user_id}: –æ—Ñ—Ñ–µ—Ä —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                continue

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ last_interaction –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –º–µ–Ω–µ–µ 1 —á–∞—Å–∞ –Ω–∞–∑–∞–¥
            if not last_interaction or last_interaction > one_hour_ago:
                logger.debug(f"–ü—Ä–æ–ø—É—â–µ–Ω user_id {user_id}: last_interaction –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –Ω–µ–¥–∞–≤–Ω–∏–π")
                continue

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ñ—Ñ–µ—Ä
            success = await send_offer_to_user(user_id, lang)
            if success:
                # –û–±–Ω–æ–≤–ª—è–µ–º offer_scheduled_at
                user_data['offer_scheduled_at'] = now
                db.save_user_state(user_id, user_data)
                db.log_action(user_id, 'offer_sent', {'lang': lang})

        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")

if __name__ == '__main__':
    asyncio.run(check_and_send_offers())